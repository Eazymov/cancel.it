/* @flow strict */

declare export default class Cancelable<R> extends Promise<R> {
  static from<T>(promise: Promise<T>): Cancelable<T>;

  static resolve<T>(value: Promise<T> | T): Cancelable<T>;

  // flowlint-next-line unclear-type:off
  static reject<T>(error: any): Cancelable<T>;

  static all<T: Iterable<mixed>>(
    promises: T,
  ): Cancelable<$TupleMap<T, typeof $await>>;

  static race<T, Elem: Promise<T> | T>(promises: Iterable<Elem>): Cancelable<T>;

  +token: string;

  constructor(
    callback: (
      resolve: (result: Promise<R> | R) => void,
      // flowlint-next-line unclear-type:off
      reject: (error: any) => void,
    ) => mixed,
  ): void;

  cancel(): void;

  isCanceled(): boolean;

  then(onFulfill: null | void, onReject: null | void): Cancelable<R>;

  then<U>(
    onFulfill: null | void,
    // flowlint-next-line unclear-type:off
    onReject: (error: any) => Promise<U> | U,
  ): Cancelable<R | U>;

  then<U>(
    onFulfill: (value: R) => Promise<U> | U,
    // flowlint-next-line unclear-type:off
    onReject: null | void | ((error: any) => Promise<U> | U),
  ): Cancelable<U>;

  catch(onReject: null | void): Cancelable<R>;

  // flowlint-next-line unclear-type:off
  catch<U>(onReject: (error: any) => Promise<U> | U): Cancelable<R | U>;

  finally(onFinally: () => mixed): Cancelable<R>;
}
